{"version":3,"sources":["serviceWorker.js","components/User.js","components/TodoItem.js","components/TodoList.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","User","props","react_default","a","createElement","name","TodoItem","item","components_User","complete","TodoList","newList","list","map","e","user","users","find","u","id","userId","components_TodoItem","key","title","completed","onClick","sort","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todoList","loaded","isLoading","disabled","handleClick","bind","assertThisInitialized","sortTable","_this2","setState","fetch","then","response","json","data","b","localeCompare","components_TodoList","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+GCVSC,MANf,SAAcC,GACV,OACIC,EAAAC,EAAAC,cAAA,UAAKH,EAAMI,OCSJC,MAVf,SAAkBL,GACd,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,MACXL,EAAAC,EAAAC,cAACI,EAAD,CAAMH,KAAMJ,EAAMI,OAClBH,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,YCgBJC,MApBf,SAAkBT,GAChB,IAAIU,EAASV,EAAMW,KAAKC,IAAI,SAAAC,GAC1B,IAAIC,EAAOd,EAAMe,MAAMC,KAAK,SAAAC,GAC1B,OAAOA,EAAEC,KAAOL,EAAEM,SAEpB,OACElB,EAAAC,EAAAC,cAACiB,EAAD,CAAUC,IAAKR,EAAEK,GAAIZ,KAAMO,EAAES,MAAOlB,KAAMU,EAAKV,KAAMI,SAAUK,EAAEU,UAAY,YAAc,oBAI/F,OACEtB,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,MAAIqB,QAASxB,EAAMyB,MAAnB,wBAAkDxB,EAAAC,EAAAC,cAAA,kBAAaF,EAAAC,EAAAC,cAAA,qBAClEO,KCiDUgB,cA9Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,SAAU,GACVpB,MAAO,GACPqB,QAAQ,EACRC,WAAW,EACXC,UAAU,GAEZX,EAAKY,YAAcZ,EAAKY,YAAYC,KAAjBZ,OAAAa,EAAA,EAAAb,CAAAD,IACnBA,EAAKe,UAAYf,EAAKe,UAAUF,KAAfZ,OAAAa,EAAA,EAAAb,CAAAD,IAVLA,6EAcA,IAAAgB,EAAAb,KACZA,KAAKc,SAAS,CACZP,WAAW,EACXC,UAAU,IAGZO,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJN,EAAKC,SAAS,CACZT,SAAUc,MAIhBJ,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJN,EAAKC,SAAS,CACZ7B,MAAOkC,EACPb,QAAQ,EACRC,WAAW,0CAMjBP,KAAKc,SAAS,CACZT,SAAUL,KAAKI,MAAMC,SAASV,KAAK,SAACvB,EAAGgD,GAAJ,OAAUhD,EAAEoB,MAAM6B,cAAcD,EAAE5B,4CAMvE,OACErB,EAAAC,EAAAC,cAAA,WACG2B,KAAKI,MAAME,OAASnC,EAAAC,EAAAC,cAACiD,EAAD,CAAUzC,KAAMmB,KAAKI,MAAMC,SAAUpB,MAAOe,KAAKI,MAAMnB,MAAOU,KAAMK,KAAKY,YAC5FzC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQqB,QAASM,KAAKS,YAAaD,SAAUR,KAAKI,MAAMI,UAAxD,QAEER,KAAKI,MAAMG,UAAYpC,EAAAC,EAAAC,cAAA,KAAGe,GAAG,QAAN,cAA8B,cAtDjDmC,aCElBC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAAQC,SAASC,eAAe,SL2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,KAAK,SAAAgB,GACjCA,EAAaC","file":"static/js/main.2a542795.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nfunction User(props) {\r\n    return (\r\n        <td>{props.name}</td>\r\n    )\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport User from \"./User\";\r\n\r\nfunction TodoItem(props) {\r\n    return (\r\n      <tr>\r\n        <td>{props.item}</td>\r\n        <User name={props.name}/>\r\n        <td>{props.complete}</td>\r\n      </tr>\r\n    );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\n\r\n\r\nfunction TodoList(props){\r\n  let newList= props.list.map(e => {\r\n    let user = props.users.find(u => {\r\n      return u.id === e.userId;\r\n    });\r\n    return (\r\n      <TodoItem key={e.id} item={e.title} name={user.name} complete={e.completed ? 'completed' : 'not completed'}/>\r\n    )\r\n  });\r\n\r\n  return(\r\n    <table>\r\n    <tbody>\r\n    <tr><td onClick={props.sort}>Title(click to sort)</td><td>User</td><td>Status</td></tr>\r\n    {newList}\r\n    </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todoList: [],\n      users: [],\n      loaded: false,\n      isLoading: false,\n      disabled: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.sortTable = this.sortTable.bind(this);\n  }\n\n\n  handleClick() {\n    this.setState({\n      isLoading: true,\n      disabled: true\n    });\n\n    fetch('https://jsonplaceholder.typicode.com/todos')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          todoList: data\n        })\n      });\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          users: data,\n          loaded: true,\n          isLoading: false\n        })\n      });\n  }\n\n  sortTable(){\n    this.setState({\n      todoList: this.state.todoList.sort((a, b) => a.title.localeCompare(b.title))\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        {this.state.loaded ? <TodoList list={this.state.todoList} users={this.state.users} sort={this.sortTable}/> :\n          <div>\n            <button onClick={this.handleClick} disabled={this.state.disabled}>Load</button>\n            {\n              this.state.isLoading ? <p id='load'>Loading...</p> : null\n            }\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}